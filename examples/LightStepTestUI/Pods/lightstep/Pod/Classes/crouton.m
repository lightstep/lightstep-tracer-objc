/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "crouton.h"

@implementation RLKeyValue

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) Key Value: (NSString *) Value
{
  self = [super init];
  __Key = [Key retain_stub];
  __Key_isset = YES;
  __Value = [Value retain_stub];
  __Value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"Key"])
  {
    __Key = [[decoder decodeObjectForKey: @"Key"] retain_stub];
    __Key_isset = YES;
  }
  if ([decoder containsValueForKey: @"Value"])
  {
    __Value = [[decoder decodeObjectForKey: @"Value"] retain_stub];
    __Value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__Key_isset)
  {
    [encoder encodeObject: __Key forKey: @"Key"];
  }
  if (__Value_isset)
  {
    [encoder encodeObject: __Value forKey: @"Value"];
  }
}

- (void) dealloc
{
  [__Key release_stub];
  [__Value release_stub];
  [super dealloc_stub];
}

- (NSString *) Key {
  return [[__Key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) Key {
  [Key retain_stub];
  [__Key release_stub];
  __Key = Key;
  __Key_isset = YES;
}

- (BOOL) KeyIsSet {
  return __Key_isset;
}

- (void) unsetKey {
  [__Key release_stub];
  __Key = nil;
  __Key_isset = NO;
}

- (NSString *) Value {
  return [[__Value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) Value {
  [Value retain_stub];
  [__Value release_stub];
  __Value = Value;
  __Value_isset = YES;
}

- (BOOL) ValueIsSet {
  return __Value_isset;
}

- (void) unsetValue {
  [__Value release_stub];
  __Value = nil;
  __Value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"KeyValue"];
  if (__Key_isset) {
    if (__Key != nil) {
      [outProtocol writeFieldBeginWithName: @"Key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __Key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Value_isset) {
    if (__Value != nil) {
      [outProtocol writeFieldBeginWithName: @"Value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __Value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__Key_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'Key' is not set."];
  }
  if (!__Value_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'Value' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLKeyValue("];
  [ms appendString: @"Key:"];
  [ms appendFormat: @"\"%@\"", __Key];
  [ms appendString: @",Value:"];
  [ms appendFormat: @"\"%@\"", __Value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLNamedCounter

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) Name Value: (int64_t) Value
{
  self = [super init];
  __Name = [Name retain_stub];
  __Name_isset = YES;
  __Value = Value;
  __Value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"Name"])
  {
    __Name = [[decoder decodeObjectForKey: @"Name"] retain_stub];
    __Name_isset = YES;
  }
  if ([decoder containsValueForKey: @"Value"])
  {
    __Value = [decoder decodeInt64ForKey: @"Value"];
    __Value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__Name_isset)
  {
    [encoder encodeObject: __Name forKey: @"Name"];
  }
  if (__Value_isset)
  {
    [encoder encodeInt64: __Value forKey: @"Value"];
  }
}

- (void) dealloc
{
  [__Name release_stub];
  [super dealloc_stub];
}

- (NSString *) Name {
  return [[__Name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) Name {
  [Name retain_stub];
  [__Name release_stub];
  __Name = Name;
  __Name_isset = YES;
}

- (BOOL) NameIsSet {
  return __Name_isset;
}

- (void) unsetName {
  [__Name release_stub];
  __Name = nil;
  __Name_isset = NO;
}

- (int64_t) Value {
  return __Value;
}

- (void) setValue: (int64_t) Value {
  __Value = Value;
  __Value_isset = YES;
}

- (BOOL) ValueIsSet {
  return __Value_isset;
}

- (void) unsetValue {
  __Value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NamedCounter"];
  if (__Name_isset) {
    if (__Name != nil) {
      [outProtocol writeFieldBeginWithName: @"Name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __Name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Value_isset) {
    [outProtocol writeFieldBeginWithName: @"Value" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __Value];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__Name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'Name' is not set."];
  }
  if (!__Value_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'Value' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLNamedCounter("];
  [ms appendString: @"Name:"];
  [ms appendFormat: @"\"%@\"", __Name];
  [ms appendString: @",Value:"];
  [ms appendFormat: @"%qi", __Value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLRuntime

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (NSString *) guid start_micros: (int64_t) start_micros group_name: (NSString *) group_name attrs: (NSMutableArray *) attrs
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __start_micros = start_micros;
  __start_micros_isset = YES;
  __group_name = [group_name retain_stub];
  __group_name_isset = YES;
  __attrs = [attrs retain_stub];
  __attrs_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"start_micros"])
  {
    __start_micros = [decoder decodeInt64ForKey: @"start_micros"];
    __start_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"group_name"])
  {
    __group_name = [[decoder decodeObjectForKey: @"group_name"] retain_stub];
    __group_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"attrs"])
  {
    __attrs = [[decoder decodeObjectForKey: @"attrs"] retain_stub];
    __attrs_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__start_micros_isset)
  {
    [encoder encodeInt64: __start_micros forKey: @"start_micros"];
  }
  if (__group_name_isset)
  {
    [encoder encodeObject: __group_name forKey: @"group_name"];
  }
  if (__attrs_isset)
  {
    [encoder encodeObject: __attrs forKey: @"attrs"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__group_name release_stub];
  [__attrs release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (int64_t) start_micros {
  return __start_micros;
}

- (void) setStart_micros: (int64_t) start_micros {
  __start_micros = start_micros;
  __start_micros_isset = YES;
}

- (BOOL) start_microsIsSet {
  return __start_micros_isset;
}

- (void) unsetStart_micros {
  __start_micros_isset = NO;
}

- (NSString *) group_name {
  return [[__group_name retain_stub] autorelease_stub];
}

- (void) setGroup_name: (NSString *) group_name {
  [group_name retain_stub];
  [__group_name release_stub];
  __group_name = group_name;
  __group_name_isset = YES;
}

- (BOOL) group_nameIsSet {
  return __group_name_isset;
}

- (void) unsetGroup_name {
  [__group_name release_stub];
  __group_name = nil;
  __group_name_isset = NO;
}

- (NSMutableArray *) attrs {
  return [[__attrs retain_stub] autorelease_stub];
}

- (void) setAttrs: (NSMutableArray *) attrs {
  [attrs retain_stub];
  [__attrs release_stub];
  __attrs = attrs;
  __attrs_isset = YES;
}

- (BOOL) attrsIsSet {
  return __attrs_isset;
}

- (void) unsetAttrs {
  [__attrs release_stub];
  __attrs = nil;
  __attrs_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStart_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroup_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            RLKeyValue *_elem2 = [[RLKeyValue alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setAttrs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Runtime"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__start_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"start_micros" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __start_micros];
    [outProtocol writeFieldEnd];
  }
  if (__group_name_isset) {
    if (__group_name != nil) {
      [outProtocol writeFieldBeginWithName: @"group_name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __group_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attrs_isset) {
    if (__attrs != nil) {
      [outProtocol writeFieldBeginWithName: @"attrs" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__attrs count]];
        int idx4;
        for (idx4 = 0; idx4 < [__attrs count]; idx4++)
        {
          [[__attrs objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLRuntime("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",start_micros:"];
  [ms appendFormat: @"%qi", __start_micros];
  [ms appendString: @",group_name:"];
  [ms appendFormat: @"\"%@\"", __group_name];
  [ms appendString: @",attrs:"];
  [ms appendFormat: @"%@", __attrs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLLogRecord

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTimestamp_micros: (int64_t) timestamp_micros runtime_guid: (NSString *) runtime_guid span_guid: (NSString *) span_guid stable_name: (NSString *) stable_name message: (NSString *) message level: (NSString *) level thread_id: (int64_t) thread_id filename: (NSString *) filename line_number: (int64_t) line_number stack_frames: (NSMutableArray *) stack_frames payload_json: (NSString *) payload_json error_flag: (BOOL) error_flag
{
  self = [super init];
  __timestamp_micros = timestamp_micros;
  __timestamp_micros_isset = YES;
  __runtime_guid = [runtime_guid retain_stub];
  __runtime_guid_isset = YES;
  __span_guid = [span_guid retain_stub];
  __span_guid_isset = YES;
  __stable_name = [stable_name retain_stub];
  __stable_name_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __level = [level retain_stub];
  __level_isset = YES;
  __thread_id = thread_id;
  __thread_id_isset = YES;
  __filename = [filename retain_stub];
  __filename_isset = YES;
  __line_number = line_number;
  __line_number_isset = YES;
  __stack_frames = [stack_frames retain_stub];
  __stack_frames_isset = YES;
  __payload_json = [payload_json retain_stub];
  __payload_json_isset = YES;
  __error_flag = error_flag;
  __error_flag_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"timestamp_micros"])
  {
    __timestamp_micros = [decoder decodeInt64ForKey: @"timestamp_micros"];
    __timestamp_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"runtime_guid"])
  {
    __runtime_guid = [[decoder decodeObjectForKey: @"runtime_guid"] retain_stub];
    __runtime_guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"span_guid"])
  {
    __span_guid = [[decoder decodeObjectForKey: @"span_guid"] retain_stub];
    __span_guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"stable_name"])
  {
    __stable_name = [[decoder decodeObjectForKey: @"stable_name"] retain_stub];
    __stable_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [[decoder decodeObjectForKey: @"level"] retain_stub];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"thread_id"])
  {
    __thread_id = [decoder decodeInt64ForKey: @"thread_id"];
    __thread_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"filename"])
  {
    __filename = [[decoder decodeObjectForKey: @"filename"] retain_stub];
    __filename_isset = YES;
  }
  if ([decoder containsValueForKey: @"line_number"])
  {
    __line_number = [decoder decodeInt64ForKey: @"line_number"];
    __line_number_isset = YES;
  }
  if ([decoder containsValueForKey: @"stack_frames"])
  {
    __stack_frames = [[decoder decodeObjectForKey: @"stack_frames"] retain_stub];
    __stack_frames_isset = YES;
  }
  if ([decoder containsValueForKey: @"payload_json"])
  {
    __payload_json = [[decoder decodeObjectForKey: @"payload_json"] retain_stub];
    __payload_json_isset = YES;
  }
  if ([decoder containsValueForKey: @"error_flag"])
  {
    __error_flag = [decoder decodeBoolForKey: @"error_flag"];
    __error_flag_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__timestamp_micros_isset)
  {
    [encoder encodeInt64: __timestamp_micros forKey: @"timestamp_micros"];
  }
  if (__runtime_guid_isset)
  {
    [encoder encodeObject: __runtime_guid forKey: @"runtime_guid"];
  }
  if (__span_guid_isset)
  {
    [encoder encodeObject: __span_guid forKey: @"span_guid"];
  }
  if (__stable_name_isset)
  {
    [encoder encodeObject: __stable_name forKey: @"stable_name"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__level_isset)
  {
    [encoder encodeObject: __level forKey: @"level"];
  }
  if (__thread_id_isset)
  {
    [encoder encodeInt64: __thread_id forKey: @"thread_id"];
  }
  if (__filename_isset)
  {
    [encoder encodeObject: __filename forKey: @"filename"];
  }
  if (__line_number_isset)
  {
    [encoder encodeInt64: __line_number forKey: @"line_number"];
  }
  if (__stack_frames_isset)
  {
    [encoder encodeObject: __stack_frames forKey: @"stack_frames"];
  }
  if (__payload_json_isset)
  {
    [encoder encodeObject: __payload_json forKey: @"payload_json"];
  }
  if (__error_flag_isset)
  {
    [encoder encodeBool: __error_flag forKey: @"error_flag"];
  }
}

- (void) dealloc
{
  [__runtime_guid release_stub];
  [__span_guid release_stub];
  [__stable_name release_stub];
  [__message release_stub];
  [__level release_stub];
  [__filename release_stub];
  [__stack_frames release_stub];
  [__payload_json release_stub];
  [super dealloc_stub];
}

- (int64_t) timestamp_micros {
  return __timestamp_micros;
}

- (void) setTimestamp_micros: (int64_t) timestamp_micros {
  __timestamp_micros = timestamp_micros;
  __timestamp_micros_isset = YES;
}

- (BOOL) timestamp_microsIsSet {
  return __timestamp_micros_isset;
}

- (void) unsetTimestamp_micros {
  __timestamp_micros_isset = NO;
}

- (NSString *) runtime_guid {
  return [[__runtime_guid retain_stub] autorelease_stub];
}

- (void) setRuntime_guid: (NSString *) runtime_guid {
  [runtime_guid retain_stub];
  [__runtime_guid release_stub];
  __runtime_guid = runtime_guid;
  __runtime_guid_isset = YES;
}

- (BOOL) runtime_guidIsSet {
  return __runtime_guid_isset;
}

- (void) unsetRuntime_guid {
  [__runtime_guid release_stub];
  __runtime_guid = nil;
  __runtime_guid_isset = NO;
}

- (NSString *) span_guid {
  return [[__span_guid retain_stub] autorelease_stub];
}

- (void) setSpan_guid: (NSString *) span_guid {
  [span_guid retain_stub];
  [__span_guid release_stub];
  __span_guid = span_guid;
  __span_guid_isset = YES;
}

- (BOOL) span_guidIsSet {
  return __span_guid_isset;
}

- (void) unsetSpan_guid {
  [__span_guid release_stub];
  __span_guid = nil;
  __span_guid_isset = NO;
}

- (NSString *) stable_name {
  return [[__stable_name retain_stub] autorelease_stub];
}

- (void) setStable_name: (NSString *) stable_name {
  [stable_name retain_stub];
  [__stable_name release_stub];
  __stable_name = stable_name;
  __stable_name_isset = YES;
}

- (BOOL) stable_nameIsSet {
  return __stable_name_isset;
}

- (void) unsetStable_name {
  [__stable_name release_stub];
  __stable_name = nil;
  __stable_name_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (NSString *) level {
  return [[__level retain_stub] autorelease_stub];
}

- (void) setLevel: (NSString *) level {
  [level retain_stub];
  [__level release_stub];
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  [__level release_stub];
  __level = nil;
  __level_isset = NO;
}

- (int64_t) thread_id {
  return __thread_id;
}

- (void) setThread_id: (int64_t) thread_id {
  __thread_id = thread_id;
  __thread_id_isset = YES;
}

- (BOOL) thread_idIsSet {
  return __thread_id_isset;
}

- (void) unsetThread_id {
  __thread_id_isset = NO;
}

- (NSString *) filename {
  return [[__filename retain_stub] autorelease_stub];
}

- (void) setFilename: (NSString *) filename {
  [filename retain_stub];
  [__filename release_stub];
  __filename = filename;
  __filename_isset = YES;
}

- (BOOL) filenameIsSet {
  return __filename_isset;
}

- (void) unsetFilename {
  [__filename release_stub];
  __filename = nil;
  __filename_isset = NO;
}

- (int64_t) line_number {
  return __line_number;
}

- (void) setLine_number: (int64_t) line_number {
  __line_number = line_number;
  __line_number_isset = YES;
}

- (BOOL) line_numberIsSet {
  return __line_number_isset;
}

- (void) unsetLine_number {
  __line_number_isset = NO;
}

- (NSMutableArray *) stack_frames {
  return [[__stack_frames retain_stub] autorelease_stub];
}

- (void) setStack_frames: (NSMutableArray *) stack_frames {
  [stack_frames retain_stub];
  [__stack_frames release_stub];
  __stack_frames = stack_frames;
  __stack_frames_isset = YES;
}

- (BOOL) stack_framesIsSet {
  return __stack_frames_isset;
}

- (void) unsetStack_frames {
  [__stack_frames release_stub];
  __stack_frames = nil;
  __stack_frames_isset = NO;
}

- (NSString *) payload_json {
  return [[__payload_json retain_stub] autorelease_stub];
}

- (void) setPayload_json: (NSString *) payload_json {
  [payload_json retain_stub];
  [__payload_json release_stub];
  __payload_json = payload_json;
  __payload_json_isset = YES;
}

- (BOOL) payload_jsonIsSet {
  return __payload_json_isset;
}

- (void) unsetPayload_json {
  [__payload_json release_stub];
  __payload_json = nil;
  __payload_json_isset = NO;
}

- (BOOL) error_flag {
  return __error_flag;
}

- (void) setError_flag: (BOOL) error_flag {
  __error_flag = error_flag;
  __error_flag_isset = YES;
}

- (BOOL) error_flagIsSet {
  return __error_flag_isset;
}

- (void) unsetError_flag {
  __error_flag_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRuntime_guid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpan_guid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStable_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setThread_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFilename: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLine_number: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setStack_frames: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPayload_json: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setError_flag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LogRecord"];
  if (__timestamp_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp_micros" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __timestamp_micros];
    [outProtocol writeFieldEnd];
  }
  if (__runtime_guid_isset) {
    if (__runtime_guid != nil) {
      [outProtocol writeFieldBeginWithName: @"runtime_guid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __runtime_guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__span_guid_isset) {
    if (__span_guid != nil) {
      [outProtocol writeFieldBeginWithName: @"span_guid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __span_guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stable_name_isset) {
    if (__stable_name != nil) {
      [outProtocol writeFieldBeginWithName: @"stable_name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __stable_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__level_isset) {
    if (__level != nil) {
      [outProtocol writeFieldBeginWithName: @"level" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __level];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thread_id_isset) {
    [outProtocol writeFieldBeginWithName: @"thread_id" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __thread_id];
    [outProtocol writeFieldEnd];
  }
  if (__filename_isset) {
    if (__filename != nil) {
      [outProtocol writeFieldBeginWithName: @"filename" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __filename];
      [outProtocol writeFieldEnd];
    }
  }
  if (__line_number_isset) {
    [outProtocol writeFieldBeginWithName: @"line_number" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __line_number];
    [outProtocol writeFieldEnd];
  }
  if (__stack_frames_isset) {
    if (__stack_frames != nil) {
      [outProtocol writeFieldBeginWithName: @"stack_frames" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: (int)[__stack_frames count]];
        int idx9;
        for (idx9 = 0; idx9 < [__stack_frames count]; idx9++)
        {
          [outProtocol writeString: [__stack_frames objectAtIndex: idx9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__payload_json_isset) {
    if (__payload_json != nil) {
      [outProtocol writeFieldBeginWithName: @"payload_json" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __payload_json];
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_flag_isset) {
    [outProtocol writeFieldBeginWithName: @"error_flag" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __error_flag];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLLogRecord("];
  [ms appendString: @"timestamp_micros:"];
  [ms appendFormat: @"%qi", __timestamp_micros];
  [ms appendString: @",runtime_guid:"];
  [ms appendFormat: @"\"%@\"", __runtime_guid];
  [ms appendString: @",span_guid:"];
  [ms appendFormat: @"\"%@\"", __span_guid];
  [ms appendString: @",stable_name:"];
  [ms appendFormat: @"\"%@\"", __stable_name];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",level:"];
  [ms appendFormat: @"\"%@\"", __level];
  [ms appendString: @",thread_id:"];
  [ms appendFormat: @"%qi", __thread_id];
  [ms appendString: @",filename:"];
  [ms appendFormat: @"\"%@\"", __filename];
  [ms appendString: @",line_number:"];
  [ms appendFormat: @"%qi", __line_number];
  [ms appendString: @",stack_frames:"];
  [ms appendFormat: @"%@", __stack_frames];
  [ms appendString: @",payload_json:"];
  [ms appendFormat: @"\"%@\"", __payload_json];
  [ms appendString: @",error_flag:"];
  [ms appendFormat: @"%i", __error_flag];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLTraceJoinId

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTraceKey: (NSString *) TraceKey Value: (NSString *) Value
{
  self = [super init];
  __TraceKey = [TraceKey retain_stub];
  __TraceKey_isset = YES;
  __Value = [Value retain_stub];
  __Value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"TraceKey"])
  {
    __TraceKey = [[decoder decodeObjectForKey: @"TraceKey"] retain_stub];
    __TraceKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"Value"])
  {
    __Value = [[decoder decodeObjectForKey: @"Value"] retain_stub];
    __Value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__TraceKey_isset)
  {
    [encoder encodeObject: __TraceKey forKey: @"TraceKey"];
  }
  if (__Value_isset)
  {
    [encoder encodeObject: __Value forKey: @"Value"];
  }
}

- (void) dealloc
{
  [__TraceKey release_stub];
  [__Value release_stub];
  [super dealloc_stub];
}

- (NSString *) TraceKey {
  return [[__TraceKey retain_stub] autorelease_stub];
}

- (void) setTraceKey: (NSString *) TraceKey {
  [TraceKey retain_stub];
  [__TraceKey release_stub];
  __TraceKey = TraceKey;
  __TraceKey_isset = YES;
}

- (BOOL) TraceKeyIsSet {
  return __TraceKey_isset;
}

- (void) unsetTraceKey {
  [__TraceKey release_stub];
  __TraceKey = nil;
  __TraceKey_isset = NO;
}

- (NSString *) Value {
  return [[__Value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) Value {
  [Value retain_stub];
  [__Value release_stub];
  __Value = Value;
  __Value_isset = YES;
}

- (BOOL) ValueIsSet {
  return __Value_isset;
}

- (void) unsetValue {
  [__Value release_stub];
  __Value = nil;
  __Value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTraceKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TraceJoinId"];
  if (__TraceKey_isset) {
    if (__TraceKey != nil) {
      [outProtocol writeFieldBeginWithName: @"TraceKey" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __TraceKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Value_isset) {
    if (__Value != nil) {
      [outProtocol writeFieldBeginWithName: @"Value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __Value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__TraceKey_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'TraceKey' is not set."];
  }
  if (!__Value_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'Value' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLTraceJoinId("];
  [ms appendString: @"TraceKey:"];
  [ms appendFormat: @"\"%@\"", __TraceKey];
  [ms appendString: @",Value:"];
  [ms appendFormat: @"\"%@\"", __Value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLSpanRecord

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSpan_guid: (NSString *) span_guid trace_guid: (NSString *) trace_guid runtime_guid: (NSString *) runtime_guid span_name: (NSString *) span_name join_ids: (NSMutableArray *) join_ids oldest_micros: (int64_t) oldest_micros youngest_micros: (int64_t) youngest_micros attributes: (NSMutableArray *) attributes error_flag: (BOOL) error_flag log_records: (NSMutableArray *) log_records
{
  self = [super init];
  __span_guid = [span_guid retain_stub];
  __span_guid_isset = YES;
  __trace_guid = [trace_guid retain_stub];
  __trace_guid_isset = YES;
  __runtime_guid = [runtime_guid retain_stub];
  __runtime_guid_isset = YES;
  __span_name = [span_name retain_stub];
  __span_name_isset = YES;
  __join_ids = [join_ids retain_stub];
  __join_ids_isset = YES;
  __oldest_micros = oldest_micros;
  __oldest_micros_isset = YES;
  __youngest_micros = youngest_micros;
  __youngest_micros_isset = YES;
  __attributes = [attributes retain_stub];
  __attributes_isset = YES;
  __error_flag = error_flag;
  __error_flag_isset = YES;
  __log_records = [log_records retain_stub];
  __log_records_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"span_guid"])
  {
    __span_guid = [[decoder decodeObjectForKey: @"span_guid"] retain_stub];
    __span_guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"trace_guid"])
  {
    __trace_guid = [[decoder decodeObjectForKey: @"trace_guid"] retain_stub];
    __trace_guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"runtime_guid"])
  {
    __runtime_guid = [[decoder decodeObjectForKey: @"runtime_guid"] retain_stub];
    __runtime_guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"span_name"])
  {
    __span_name = [[decoder decodeObjectForKey: @"span_name"] retain_stub];
    __span_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"join_ids"])
  {
    __join_ids = [[decoder decodeObjectForKey: @"join_ids"] retain_stub];
    __join_ids_isset = YES;
  }
  if ([decoder containsValueForKey: @"oldest_micros"])
  {
    __oldest_micros = [decoder decodeInt64ForKey: @"oldest_micros"];
    __oldest_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"youngest_micros"])
  {
    __youngest_micros = [decoder decodeInt64ForKey: @"youngest_micros"];
    __youngest_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributes"])
  {
    __attributes = [[decoder decodeObjectForKey: @"attributes"] retain_stub];
    __attributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"error_flag"])
  {
    __error_flag = [decoder decodeBoolForKey: @"error_flag"];
    __error_flag_isset = YES;
  }
  if ([decoder containsValueForKey: @"log_records"])
  {
    __log_records = [[decoder decodeObjectForKey: @"log_records"] retain_stub];
    __log_records_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__span_guid_isset)
  {
    [encoder encodeObject: __span_guid forKey: @"span_guid"];
  }
  if (__trace_guid_isset)
  {
    [encoder encodeObject: __trace_guid forKey: @"trace_guid"];
  }
  if (__runtime_guid_isset)
  {
    [encoder encodeObject: __runtime_guid forKey: @"runtime_guid"];
  }
  if (__span_name_isset)
  {
    [encoder encodeObject: __span_name forKey: @"span_name"];
  }
  if (__join_ids_isset)
  {
    [encoder encodeObject: __join_ids forKey: @"join_ids"];
  }
  if (__oldest_micros_isset)
  {
    [encoder encodeInt64: __oldest_micros forKey: @"oldest_micros"];
  }
  if (__youngest_micros_isset)
  {
    [encoder encodeInt64: __youngest_micros forKey: @"youngest_micros"];
  }
  if (__attributes_isset)
  {
    [encoder encodeObject: __attributes forKey: @"attributes"];
  }
  if (__error_flag_isset)
  {
    [encoder encodeBool: __error_flag forKey: @"error_flag"];
  }
  if (__log_records_isset)
  {
    [encoder encodeObject: __log_records forKey: @"log_records"];
  }
}

- (void) dealloc
{
  [__span_guid release_stub];
  [__trace_guid release_stub];
  [__runtime_guid release_stub];
  [__span_name release_stub];
  [__join_ids release_stub];
  [__attributes release_stub];
  [__log_records release_stub];
  [super dealloc_stub];
}

- (NSString *) span_guid {
  return [[__span_guid retain_stub] autorelease_stub];
}

- (void) setSpan_guid: (NSString *) span_guid {
  [span_guid retain_stub];
  [__span_guid release_stub];
  __span_guid = span_guid;
  __span_guid_isset = YES;
}

- (BOOL) span_guidIsSet {
  return __span_guid_isset;
}

- (void) unsetSpan_guid {
  [__span_guid release_stub];
  __span_guid = nil;
  __span_guid_isset = NO;
}

- (NSString *) trace_guid {
  return [[__trace_guid retain_stub] autorelease_stub];
}

- (void) setTrace_guid: (NSString *) trace_guid {
  [trace_guid retain_stub];
  [__trace_guid release_stub];
  __trace_guid = trace_guid;
  __trace_guid_isset = YES;
}

- (BOOL) trace_guidIsSet {
  return __trace_guid_isset;
}

- (void) unsetTrace_guid {
  [__trace_guid release_stub];
  __trace_guid = nil;
  __trace_guid_isset = NO;
}

- (NSString *) runtime_guid {
  return [[__runtime_guid retain_stub] autorelease_stub];
}

- (void) setRuntime_guid: (NSString *) runtime_guid {
  [runtime_guid retain_stub];
  [__runtime_guid release_stub];
  __runtime_guid = runtime_guid;
  __runtime_guid_isset = YES;
}

- (BOOL) runtime_guidIsSet {
  return __runtime_guid_isset;
}

- (void) unsetRuntime_guid {
  [__runtime_guid release_stub];
  __runtime_guid = nil;
  __runtime_guid_isset = NO;
}

- (NSString *) span_name {
  return [[__span_name retain_stub] autorelease_stub];
}

- (void) setSpan_name: (NSString *) span_name {
  [span_name retain_stub];
  [__span_name release_stub];
  __span_name = span_name;
  __span_name_isset = YES;
}

- (BOOL) span_nameIsSet {
  return __span_name_isset;
}

- (void) unsetSpan_name {
  [__span_name release_stub];
  __span_name = nil;
  __span_name_isset = NO;
}

- (NSMutableArray *) join_ids {
  return [[__join_ids retain_stub] autorelease_stub];
}

- (void) setJoin_ids: (NSMutableArray *) join_ids {
  [join_ids retain_stub];
  [__join_ids release_stub];
  __join_ids = join_ids;
  __join_ids_isset = YES;
}

- (BOOL) join_idsIsSet {
  return __join_ids_isset;
}

- (void) unsetJoin_ids {
  [__join_ids release_stub];
  __join_ids = nil;
  __join_ids_isset = NO;
}

- (int64_t) oldest_micros {
  return __oldest_micros;
}

- (void) setOldest_micros: (int64_t) oldest_micros {
  __oldest_micros = oldest_micros;
  __oldest_micros_isset = YES;
}

- (BOOL) oldest_microsIsSet {
  return __oldest_micros_isset;
}

- (void) unsetOldest_micros {
  __oldest_micros_isset = NO;
}

- (int64_t) youngest_micros {
  return __youngest_micros;
}

- (void) setYoungest_micros: (int64_t) youngest_micros {
  __youngest_micros = youngest_micros;
  __youngest_micros_isset = YES;
}

- (BOOL) youngest_microsIsSet {
  return __youngest_micros_isset;
}

- (void) unsetYoungest_micros {
  __youngest_micros_isset = NO;
}

- (NSMutableArray *) attributes {
  return [[__attributes retain_stub] autorelease_stub];
}

- (void) setAttributes: (NSMutableArray *) attributes {
  [attributes retain_stub];
  [__attributes release_stub];
  __attributes = attributes;
  __attributes_isset = YES;
}

- (BOOL) attributesIsSet {
  return __attributes_isset;
}

- (void) unsetAttributes {
  [__attributes release_stub];
  __attributes = nil;
  __attributes_isset = NO;
}

- (BOOL) error_flag {
  return __error_flag;
}

- (void) setError_flag: (BOOL) error_flag {
  __error_flag = error_flag;
  __error_flag_isset = YES;
}

- (BOOL) error_flagIsSet {
  return __error_flag_isset;
}

- (void) unsetError_flag {
  __error_flag_isset = NO;
}

- (NSMutableArray *) log_records {
  return [[__log_records retain_stub] autorelease_stub];
}

- (void) setLog_records: (NSMutableArray *) log_records {
  [log_records retain_stub];
  [__log_records release_stub];
  __log_records = log_records;
  __log_records_isset = YES;
}

- (BOOL) log_recordsIsSet {
  return __log_records_isset;
}

- (void) unsetLog_records {
  [__log_records release_stub];
  __log_records = nil;
  __log_records_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpan_guid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTrace_guid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRuntime_guid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpan_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            RLTraceJoinId *_elem12 = [[RLTraceJoinId alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setJoin_ids: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOldest_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setYoungest_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size13;
          [inProtocol readListBeginReturningElementType: NULL size: &_size13];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            RLKeyValue *_elem15 = [[RLKeyValue alloc] init];
            [_elem15 read: inProtocol];
            [fieldValue addObject: _elem15];
            [_elem15 release_stub];
          }
          [inProtocol readListEnd];
          [self setAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setError_flag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            RLLogRecord *_elem18 = [[RLLogRecord alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release_stub];
          }
          [inProtocol readListEnd];
          [self setLog_records: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SpanRecord"];
  if (__span_guid_isset) {
    if (__span_guid != nil) {
      [outProtocol writeFieldBeginWithName: @"span_guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __span_guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__trace_guid_isset) {
    if (__trace_guid != nil) {
      [outProtocol writeFieldBeginWithName: @"trace_guid" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __trace_guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__runtime_guid_isset) {
    if (__runtime_guid != nil) {
      [outProtocol writeFieldBeginWithName: @"runtime_guid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __runtime_guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__span_name_isset) {
    if (__span_name != nil) {
      [outProtocol writeFieldBeginWithName: @"span_name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __span_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__join_ids_isset) {
    if (__join_ids != nil) {
      [outProtocol writeFieldBeginWithName: @"join_ids" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__join_ids count]];
        int idx20;
        for (idx20 = 0; idx20 < [__join_ids count]; idx20++)
        {
          [[__join_ids objectAtIndex: idx20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__oldest_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"oldest_micros" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __oldest_micros];
    [outProtocol writeFieldEnd];
  }
  if (__youngest_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"youngest_micros" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __youngest_micros];
    [outProtocol writeFieldEnd];
  }
  if (__attributes_isset) {
    if (__attributes != nil) {
      [outProtocol writeFieldBeginWithName: @"attributes" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__attributes count]];
        int idx22;
        for (idx22 = 0; idx22 < [__attributes count]; idx22++)
        {
          [[__attributes objectAtIndex: idx22] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_flag_isset) {
    [outProtocol writeFieldBeginWithName: @"error_flag" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __error_flag];
    [outProtocol writeFieldEnd];
  }
  if (__log_records_isset) {
    if (__log_records != nil) {
      [outProtocol writeFieldBeginWithName: @"log_records" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__log_records count]];
        int idx24;
        for (idx24 = 0; idx24 < [__log_records count]; idx24++)
        {
          [[__log_records objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLSpanRecord("];
  [ms appendString: @"span_guid:"];
  [ms appendFormat: @"\"%@\"", __span_guid];
  [ms appendString: @",trace_guid:"];
  [ms appendFormat: @"\"%@\"", __trace_guid];
  [ms appendString: @",runtime_guid:"];
  [ms appendFormat: @"\"%@\"", __runtime_guid];
  [ms appendString: @",span_name:"];
  [ms appendFormat: @"\"%@\"", __span_name];
  [ms appendString: @",join_ids:"];
  [ms appendFormat: @"%@", __join_ids];
  [ms appendString: @",oldest_micros:"];
  [ms appendFormat: @"%qi", __oldest_micros];
  [ms appendString: @",youngest_micros:"];
  [ms appendFormat: @"%qi", __youngest_micros];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", __attributes];
  [ms appendString: @",error_flag:"];
  [ms appendFormat: @"%i", __error_flag];
  [ms appendString: @",log_records:"];
  [ms appendFormat: @"%@", __log_records];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLAuth

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccess_token: (NSString *) access_token
{
  self = [super init];
  __access_token = [access_token retain_stub];
  __access_token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain_stub];
    __access_token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
}

- (void) dealloc
{
  [__access_token release_stub];
  [super dealloc_stub];
}

- (NSString *) access_token {
  return [[__access_token retain_stub] autorelease_stub];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain_stub];
  [__access_token release_stub];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release_stub];
  __access_token = nil;
  __access_token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Auth"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLAuth("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLTiming

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReceive_micros: (int64_t) receive_micros transmit_micros: (int64_t) transmit_micros
{
  self = [super init];
  __receive_micros = receive_micros;
  __receive_micros_isset = YES;
  __transmit_micros = transmit_micros;
  __transmit_micros_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"receive_micros"])
  {
    __receive_micros = [decoder decodeInt64ForKey: @"receive_micros"];
    __receive_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"transmit_micros"])
  {
    __transmit_micros = [decoder decodeInt64ForKey: @"transmit_micros"];
    __transmit_micros_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__receive_micros_isset)
  {
    [encoder encodeInt64: __receive_micros forKey: @"receive_micros"];
  }
  if (__transmit_micros_isset)
  {
    [encoder encodeInt64: __transmit_micros forKey: @"transmit_micros"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) receive_micros {
  return __receive_micros;
}

- (void) setReceive_micros: (int64_t) receive_micros {
  __receive_micros = receive_micros;
  __receive_micros_isset = YES;
}

- (BOOL) receive_microsIsSet {
  return __receive_micros_isset;
}

- (void) unsetReceive_micros {
  __receive_micros_isset = NO;
}

- (int64_t) transmit_micros {
  return __transmit_micros;
}

- (void) setTransmit_micros: (int64_t) transmit_micros {
  __transmit_micros = transmit_micros;
  __transmit_micros_isset = YES;
}

- (BOOL) transmit_microsIsSet {
  return __transmit_micros_isset;
}

- (void) unsetTransmit_micros {
  __transmit_micros_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReceive_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTransmit_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Timing"];
  if (__receive_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"receive_micros" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __receive_micros];
    [outProtocol writeFieldEnd];
  }
  if (__transmit_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"transmit_micros" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __transmit_micros];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLTiming("];
  [ms appendString: @"receive_micros:"];
  [ms appendFormat: @"%qi", __receive_micros];
  [ms appendString: @",transmit_micros:"];
  [ms appendFormat: @"%qi", __transmit_micros];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLSampleCount

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOldest_micros: (int64_t) oldest_micros youngest_micros: (int64_t) youngest_micros count: (int64_t) count
{
  self = [super init];
  __oldest_micros = oldest_micros;
  __oldest_micros_isset = YES;
  __youngest_micros = youngest_micros;
  __youngest_micros_isset = YES;
  __count = count;
  __count_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"oldest_micros"])
  {
    __oldest_micros = [decoder decodeInt64ForKey: @"oldest_micros"];
    __oldest_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"youngest_micros"])
  {
    __youngest_micros = [decoder decodeInt64ForKey: @"youngest_micros"];
    __youngest_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt64ForKey: @"count"];
    __count_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__oldest_micros_isset)
  {
    [encoder encodeInt64: __oldest_micros forKey: @"oldest_micros"];
  }
  if (__youngest_micros_isset)
  {
    [encoder encodeInt64: __youngest_micros forKey: @"youngest_micros"];
  }
  if (__count_isset)
  {
    [encoder encodeInt64: __count forKey: @"count"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) oldest_micros {
  return __oldest_micros;
}

- (void) setOldest_micros: (int64_t) oldest_micros {
  __oldest_micros = oldest_micros;
  __oldest_micros_isset = YES;
}

- (BOOL) oldest_microsIsSet {
  return __oldest_micros_isset;
}

- (void) unsetOldest_micros {
  __oldest_micros_isset = NO;
}

- (int64_t) youngest_micros {
  return __youngest_micros;
}

- (void) setYoungest_micros: (int64_t) youngest_micros {
  __youngest_micros = youngest_micros;
  __youngest_micros_isset = YES;
}

- (BOOL) youngest_microsIsSet {
  return __youngest_micros_isset;
}

- (void) unsetYoungest_micros {
  __youngest_micros_isset = NO;
}

- (int64_t) count {
  return __count;
}

- (void) setCount: (int64_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOldest_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setYoungest_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SampleCount"];
  if (__oldest_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"oldest_micros" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __oldest_micros];
    [outProtocol writeFieldEnd];
  }
  if (__youngest_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"youngest_micros" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __youngest_micros];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __count];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLSampleCount("];
  [ms appendString: @"oldest_micros:"];
  [ms appendFormat: @"%qi", __oldest_micros];
  [ms appendString: @",youngest_micros:"];
  [ms appendFormat: @"%qi", __youngest_micros];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%qi", __count];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLReportRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRuntime: (RLRuntime *) runtime span_records: (NSMutableArray *) span_records log_records: (NSMutableArray *) log_records timestamp_offset_micros: (int64_t) timestamp_offset_micros oldest_micros: (int64_t) oldest_micros youngest_micros: (int64_t) youngest_micros counters: (NSMutableArray *) counters
{
  self = [super init];
  __runtime = [runtime retain_stub];
  __runtime_isset = YES;
  __span_records = [span_records retain_stub];
  __span_records_isset = YES;
  __log_records = [log_records retain_stub];
  __log_records_isset = YES;
  __timestamp_offset_micros = timestamp_offset_micros;
  __timestamp_offset_micros_isset = YES;
  __oldest_micros = oldest_micros;
  __oldest_micros_isset = YES;
  __youngest_micros = youngest_micros;
  __youngest_micros_isset = YES;
  __counters = [counters retain_stub];
  __counters_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"runtime"])
  {
    __runtime = [[decoder decodeObjectForKey: @"runtime"] retain_stub];
    __runtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"span_records"])
  {
    __span_records = [[decoder decodeObjectForKey: @"span_records"] retain_stub];
    __span_records_isset = YES;
  }
  if ([decoder containsValueForKey: @"log_records"])
  {
    __log_records = [[decoder decodeObjectForKey: @"log_records"] retain_stub];
    __log_records_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp_offset_micros"])
  {
    __timestamp_offset_micros = [decoder decodeInt64ForKey: @"timestamp_offset_micros"];
    __timestamp_offset_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"oldest_micros"])
  {
    __oldest_micros = [decoder decodeInt64ForKey: @"oldest_micros"];
    __oldest_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"youngest_micros"])
  {
    __youngest_micros = [decoder decodeInt64ForKey: @"youngest_micros"];
    __youngest_micros_isset = YES;
  }
  if ([decoder containsValueForKey: @"counters"])
  {
    __counters = [[decoder decodeObjectForKey: @"counters"] retain_stub];
    __counters_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__runtime_isset)
  {
    [encoder encodeObject: __runtime forKey: @"runtime"];
  }
  if (__span_records_isset)
  {
    [encoder encodeObject: __span_records forKey: @"span_records"];
  }
  if (__log_records_isset)
  {
    [encoder encodeObject: __log_records forKey: @"log_records"];
  }
  if (__timestamp_offset_micros_isset)
  {
    [encoder encodeInt64: __timestamp_offset_micros forKey: @"timestamp_offset_micros"];
  }
  if (__oldest_micros_isset)
  {
    [encoder encodeInt64: __oldest_micros forKey: @"oldest_micros"];
  }
  if (__youngest_micros_isset)
  {
    [encoder encodeInt64: __youngest_micros forKey: @"youngest_micros"];
  }
  if (__counters_isset)
  {
    [encoder encodeObject: __counters forKey: @"counters"];
  }
}

- (void) dealloc
{
  [__runtime release_stub];
  [__span_records release_stub];
  [__log_records release_stub];
  [__counters release_stub];
  [super dealloc_stub];
}

- (RLRuntime *) runtime {
  return [[__runtime retain_stub] autorelease_stub];
}

- (void) setRuntime: (RLRuntime *) runtime {
  [runtime retain_stub];
  [__runtime release_stub];
  __runtime = runtime;
  __runtime_isset = YES;
}

- (BOOL) runtimeIsSet {
  return __runtime_isset;
}

- (void) unsetRuntime {
  [__runtime release_stub];
  __runtime = nil;
  __runtime_isset = NO;
}

- (NSMutableArray *) span_records {
  return [[__span_records retain_stub] autorelease_stub];
}

- (void) setSpan_records: (NSMutableArray *) span_records {
  [span_records retain_stub];
  [__span_records release_stub];
  __span_records = span_records;
  __span_records_isset = YES;
}

- (BOOL) span_recordsIsSet {
  return __span_records_isset;
}

- (void) unsetSpan_records {
  [__span_records release_stub];
  __span_records = nil;
  __span_records_isset = NO;
}

- (NSMutableArray *) log_records {
  return [[__log_records retain_stub] autorelease_stub];
}

- (void) setLog_records: (NSMutableArray *) log_records {
  [log_records retain_stub];
  [__log_records release_stub];
  __log_records = log_records;
  __log_records_isset = YES;
}

- (BOOL) log_recordsIsSet {
  return __log_records_isset;
}

- (void) unsetLog_records {
  [__log_records release_stub];
  __log_records = nil;
  __log_records_isset = NO;
}

- (int64_t) timestamp_offset_micros {
  return __timestamp_offset_micros;
}

- (void) setTimestamp_offset_micros: (int64_t) timestamp_offset_micros {
  __timestamp_offset_micros = timestamp_offset_micros;
  __timestamp_offset_micros_isset = YES;
}

- (BOOL) timestamp_offset_microsIsSet {
  return __timestamp_offset_micros_isset;
}

- (void) unsetTimestamp_offset_micros {
  __timestamp_offset_micros_isset = NO;
}

- (int64_t) oldest_micros {
  return __oldest_micros;
}

- (void) setOldest_micros: (int64_t) oldest_micros {
  __oldest_micros = oldest_micros;
  __oldest_micros_isset = YES;
}

- (BOOL) oldest_microsIsSet {
  return __oldest_micros_isset;
}

- (void) unsetOldest_micros {
  __oldest_micros_isset = NO;
}

- (int64_t) youngest_micros {
  return __youngest_micros;
}

- (void) setYoungest_micros: (int64_t) youngest_micros {
  __youngest_micros = youngest_micros;
  __youngest_micros_isset = YES;
}

- (BOOL) youngest_microsIsSet {
  return __youngest_micros_isset;
}

- (void) unsetYoungest_micros {
  __youngest_micros_isset = NO;
}

- (NSMutableArray *) counters {
  return [[__counters retain_stub] autorelease_stub];
}

- (void) setCounters: (NSMutableArray *) counters {
  [counters retain_stub];
  [__counters release_stub];
  __counters = counters;
  __counters_isset = YES;
}

- (BOOL) countersIsSet {
  return __counters_isset;
}

- (void) unsetCounters {
  [__counters release_stub];
  __counters = nil;
  __counters_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RLRuntime *fieldValue = [[RLRuntime alloc] init];
          [fieldValue read: inProtocol];
          [self setRuntime: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            RLSpanRecord *_elem27 = [[RLSpanRecord alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setSpan_records: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size28;
          [inProtocol readListBeginReturningElementType: NULL size: &_size28];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size28];
          int _i29;
          for (_i29 = 0; _i29 < _size28; ++_i29)
          {
            RLLogRecord *_elem30 = [[RLLogRecord alloc] init];
            [_elem30 read: inProtocol];
            [fieldValue addObject: _elem30];
            [_elem30 release_stub];
          }
          [inProtocol readListEnd];
          [self setLog_records: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp_offset_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOldest_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setYoungest_micros: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size31;
          [inProtocol readListBeginReturningElementType: NULL size: &_size31];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size31];
          int _i32;
          for (_i32 = 0; _i32 < _size31; ++_i32)
          {
            RLNamedCounter *_elem33 = [[RLNamedCounter alloc] init];
            [_elem33 read: inProtocol];
            [fieldValue addObject: _elem33];
            [_elem33 release_stub];
          }
          [inProtocol readListEnd];
          [self setCounters: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportRequest"];
  if (__runtime_isset) {
    if (__runtime != nil) {
      [outProtocol writeFieldBeginWithName: @"runtime" type: TType_STRUCT fieldID: 1];
      [__runtime write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__span_records_isset) {
    if (__span_records != nil) {
      [outProtocol writeFieldBeginWithName: @"span_records" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__span_records count]];
        int idx35;
        for (idx35 = 0; idx35 < [__span_records count]; idx35++)
        {
          [[__span_records objectAtIndex: idx35] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__log_records_isset) {
    if (__log_records != nil) {
      [outProtocol writeFieldBeginWithName: @"log_records" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__log_records count]];
        int idx37;
        for (idx37 = 0; idx37 < [__log_records count]; idx37++)
        {
          [[__log_records objectAtIndex: idx37] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_offset_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp_offset_micros" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __timestamp_offset_micros];
    [outProtocol writeFieldEnd];
  }
  if (__oldest_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"oldest_micros" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __oldest_micros];
    [outProtocol writeFieldEnd];
  }
  if (__youngest_micros_isset) {
    [outProtocol writeFieldBeginWithName: @"youngest_micros" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __youngest_micros];
    [outProtocol writeFieldEnd];
  }
  if (__counters_isset) {
    if (__counters != nil) {
      [outProtocol writeFieldBeginWithName: @"counters" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__counters count]];
        int idx39;
        for (idx39 = 0; idx39 < [__counters count]; idx39++)
        {
          [[__counters objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReportRequest("];
  [ms appendString: @"runtime:"];
  [ms appendFormat: @"%@", __runtime];
  [ms appendString: @",span_records:"];
  [ms appendFormat: @"%@", __span_records];
  [ms appendString: @",log_records:"];
  [ms appendFormat: @"%@", __log_records];
  [ms appendString: @",timestamp_offset_micros:"];
  [ms appendFormat: @"%qi", __timestamp_offset_micros];
  [ms appendString: @",oldest_micros:"];
  [ms appendFormat: @"%qi", __oldest_micros];
  [ms appendString: @",youngest_micros:"];
  [ms appendFormat: @"%qi", __youngest_micros];
  [ms appendString: @",counters:"];
  [ms appendFormat: @"%@", __counters];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLCommand

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDisable: (BOOL) disable
{
  self = [super init];
  __disable = disable;
  __disable_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"disable"])
  {
    __disable = [decoder decodeBoolForKey: @"disable"];
    __disable_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__disable_isset)
  {
    [encoder encodeBool: __disable forKey: @"disable"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) disable {
  return __disable;
}

- (void) setDisable: (BOOL) disable {
  __disable = disable;
  __disable_isset = YES;
}

- (BOOL) disableIsSet {
  return __disable_isset;
}

- (void) unsetDisable {
  __disable_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDisable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Command"];
  if (__disable_isset) {
    [outProtocol writeFieldBeginWithName: @"disable" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __disable];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLCommand("];
  [ms appendString: @"disable:"];
  [ms appendFormat: @"%i", __disable];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLReportResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommands: (NSMutableArray *) commands timing: (RLTiming *) timing errors: (NSMutableArray *) errors
{
  self = [super init];
  __commands = [commands retain_stub];
  __commands_isset = YES;
  __timing = [timing retain_stub];
  __timing_isset = YES;
  __errors = [errors retain_stub];
  __errors_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"commands"])
  {
    __commands = [[decoder decodeObjectForKey: @"commands"] retain_stub];
    __commands_isset = YES;
  }
  if ([decoder containsValueForKey: @"timing"])
  {
    __timing = [[decoder decodeObjectForKey: @"timing"] retain_stub];
    __timing_isset = YES;
  }
  if ([decoder containsValueForKey: @"errors"])
  {
    __errors = [[decoder decodeObjectForKey: @"errors"] retain_stub];
    __errors_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__commands_isset)
  {
    [encoder encodeObject: __commands forKey: @"commands"];
  }
  if (__timing_isset)
  {
    [encoder encodeObject: __timing forKey: @"timing"];
  }
  if (__errors_isset)
  {
    [encoder encodeObject: __errors forKey: @"errors"];
  }
}

- (void) dealloc
{
  [__commands release_stub];
  [__timing release_stub];
  [__errors release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) commands {
  return [[__commands retain_stub] autorelease_stub];
}

- (void) setCommands: (NSMutableArray *) commands {
  [commands retain_stub];
  [__commands release_stub];
  __commands = commands;
  __commands_isset = YES;
}

- (BOOL) commandsIsSet {
  return __commands_isset;
}

- (void) unsetCommands {
  [__commands release_stub];
  __commands = nil;
  __commands_isset = NO;
}

- (RLTiming *) timing {
  return [[__timing retain_stub] autorelease_stub];
}

- (void) setTiming: (RLTiming *) timing {
  [timing retain_stub];
  [__timing release_stub];
  __timing = timing;
  __timing_isset = YES;
}

- (BOOL) timingIsSet {
  return __timing_isset;
}

- (void) unsetTiming {
  [__timing release_stub];
  __timing = nil;
  __timing_isset = NO;
}

- (NSMutableArray *) errors {
  return [[__errors retain_stub] autorelease_stub];
}

- (void) setErrors: (NSMutableArray *) errors {
  [errors retain_stub];
  [__errors release_stub];
  __errors = errors;
  __errors_isset = YES;
}

- (BOOL) errorsIsSet {
  return __errors_isset;
}

- (void) unsetErrors {
  [__errors release_stub];
  __errors = nil;
  __errors_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            RLCommand *_elem42 = [[RLCommand alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setCommands: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          RLTiming *fieldValue = [[RLTiming alloc] init];
          [fieldValue read: inProtocol];
          [self setTiming: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size43;
          [inProtocol readListBeginReturningElementType: NULL size: &_size43];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size43];
          int _i44;
          for (_i44 = 0; _i44 < _size43; ++_i44)
          {
            NSString * _elem45 = [inProtocol readString];
            [fieldValue addObject: _elem45];
          }
          [inProtocol readListEnd];
          [self setErrors: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportResponse"];
  if (__commands_isset) {
    if (__commands != nil) {
      [outProtocol writeFieldBeginWithName: @"commands" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: (int)[__commands count]];
        int idx47;
        for (idx47 = 0; idx47 < [__commands count]; idx47++)
        {
          [[__commands objectAtIndex: idx47] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__timing_isset) {
    if (__timing != nil) {
      [outProtocol writeFieldBeginWithName: @"timing" type: TType_STRUCT fieldID: 2];
      [__timing write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__errors_isset) {
    if (__errors != nil) {
      [outProtocol writeFieldBeginWithName: @"errors" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: (int)[__errors count]];
        int idx49;
        for (idx49 = 0; idx49 < [__errors count]; idx49++)
        {
          [outProtocol writeString: [__errors objectAtIndex: idx49]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReportResponse("];
  [ms appendString: @"commands:"];
  [ms appendFormat: @"%@", __commands];
  [ms appendString: @",timing:"];
  [ms appendFormat: @"%@", __timing];
  [ms appendString: @",errors:"];
  [ms appendFormat: @"%@", __errors];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation RLcroutonConstants
+ (void) initialize {
}
@end

@interface RLReport_args : NSObject <TBase, NSCoding> {
  RLAuth * __auth;
  RLReportRequest * __request;

  BOOL __auth_isset;
  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) RLAuth * auth;
@property (nonatomic, retain, getter=request, setter=setRequest:) RLReportRequest * request;
#endif

- (id) init;
- (id) initWithAuth: (RLAuth *) auth request: (RLReportRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RLAuth *) auth;
- (void) setAuth: (RLAuth *) auth;
#endif
- (BOOL) authIsSet;

#if !__has_feature(objc_arc)
- (RLReportRequest *) request;
- (void) setRequest: (RLReportRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation RLReport_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuth: (RLAuth *) auth request: (RLReportRequest *) request
{
  self = [super init];
  __auth = [auth retain_stub];
  __auth_isset = YES;
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain_stub];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__auth release_stub];
  [__request release_stub];
  [super dealloc_stub];
}

- (RLAuth *) auth {
  return [[__auth retain_stub] autorelease_stub];
}

- (void) setAuth: (RLAuth *) auth {
  [auth retain_stub];
  [__auth release_stub];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release_stub];
  __auth = nil;
  __auth_isset = NO;
}

- (RLReportRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (RLReportRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RLAuth *fieldValue = [[RLAuth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          RLReportRequest *fieldValue = [[RLReportRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Report_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 2];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReport_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RLReport_result : NSObject <TBase, NSCoding> {
  RLReportResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RLReportResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (RLReportResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RLReportResponse *) success;
- (void) setSuccess: (RLReportResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation RLReport_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RLReportResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RLReportResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RLReportResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RLReportResponse *fieldValue = [[RLReportResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Report_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RLReport_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RLReportingServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_Report: (RLAuth *) auth request: (RLReportRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"Report" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Report_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 2];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RLReportResponse *) recv_Report
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RLReport_result * result = [[[RLReport_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Report failed: unknown result"];
}

- (RLReportResponse *) Report: (RLAuth *) auth request: (RLReportRequest *) request
{
  [self send_Report : auth request: request];
  return [self recv_Report];
}

@end

@implementation RLReportingServiceProcessor

- (id) initWithReportingService: (id <RLReportingService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_Report_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"Report"];
  }
  return self;
}

- (id<RLReportingService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_Report_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  RLReport_args * args = [[RLReport_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RLReport_result * result = [[RLReport_result alloc] init];
  [result setSuccess: [mService Report: [args auth] request: [args request]]];
  [outProtocol writeMessageBeginWithName: @"Report"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

